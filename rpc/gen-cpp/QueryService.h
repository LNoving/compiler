/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueryService_H
#define QueryService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "rpc_types.h"
#include "Service.h"

namespace tutorial {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class QueryServiceIf : virtual public ServiceIf {
 public:
  virtual ~QueryServiceIf() {}
  virtual void ping() = 0;
  virtual int32_t add(const int32_t num1, const int32_t num2) = 0;
  virtual int32_t q(const int32_t logid, const int64_t w) = 0;
};

class QueryServiceIfFactory : virtual public ServiceIfFactory {
 public:
  typedef QueryServiceIf Handler;

  virtual ~QueryServiceIfFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceIf* /* handler */) = 0;
};

class QueryServiceIfSingletonFactory : virtual public QueryServiceIfFactory {
 public:
  QueryServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<QueryServiceIf>& iface) : iface_(iface) {}
  virtual ~QueryServiceIfSingletonFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface_;
};

class QueryServiceNull : virtual public QueryServiceIf , virtual public ServiceNull {
 public:
  virtual ~QueryServiceNull() {}
  void ping() {
    return;
  }
  int32_t add(const int32_t /* num1 */, const int32_t /* num2 */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t q(const int32_t /* logid */, const int64_t /* w */) {
    int32_t _return = 0;
    return _return;
  }
};


class QueryService_ping_args {
 public:

  QueryService_ping_args(const QueryService_ping_args&);
  QueryService_ping_args& operator=(const QueryService_ping_args&);
  QueryService_ping_args() {
  }

  virtual ~QueryService_ping_args() throw();

  bool operator == (const QueryService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueryService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_ping_pargs {
 public:


  virtual ~QueryService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_ping_result {
 public:

  QueryService_ping_result(const QueryService_ping_result&);
  QueryService_ping_result& operator=(const QueryService_ping_result&);
  QueryService_ping_result() {
  }

  virtual ~QueryService_ping_result() throw();

  bool operator == (const QueryService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueryService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_ping_presult {
 public:


  virtual ~QueryService_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueryService_add_args__isset {
  _QueryService_add_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _QueryService_add_args__isset;

class QueryService_add_args {
 public:

  QueryService_add_args(const QueryService_add_args&);
  QueryService_add_args& operator=(const QueryService_add_args&);
  QueryService_add_args() : num1(0), num2(0) {
  }

  virtual ~QueryService_add_args() throw();
  int32_t num1;
  int32_t num2;

  _QueryService_add_args__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int32_t val);

  bool operator == (const QueryService_add_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const QueryService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_add_pargs {
 public:


  virtual ~QueryService_add_pargs() throw();
  const int32_t* num1;
  const int32_t* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_add_result__isset {
  _QueryService_add_result__isset() : success(false) {}
  bool success :1;
} _QueryService_add_result__isset;

class QueryService_add_result {
 public:

  QueryService_add_result(const QueryService_add_result&);
  QueryService_add_result& operator=(const QueryService_add_result&);
  QueryService_add_result() : success(0) {
  }

  virtual ~QueryService_add_result() throw();
  int32_t success;

  _QueryService_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const QueryService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_add_presult__isset {
  _QueryService_add_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_add_presult__isset;

class QueryService_add_presult {
 public:


  virtual ~QueryService_add_presult() throw();
  int32_t* success;

  _QueryService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueryService_q_args__isset {
  _QueryService_q_args__isset() : logid(false), w(false) {}
  bool logid :1;
  bool w :1;
} _QueryService_q_args__isset;

class QueryService_q_args {
 public:

  QueryService_q_args(const QueryService_q_args&);
  QueryService_q_args& operator=(const QueryService_q_args&);
  QueryService_q_args() : logid(0), w(0) {
  }

  virtual ~QueryService_q_args() throw();
  int32_t logid;
  int64_t w;

  _QueryService_q_args__isset __isset;

  void __set_logid(const int32_t val);

  void __set_w(const int64_t val);

  bool operator == (const QueryService_q_args & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(w == rhs.w))
      return false;
    return true;
  }
  bool operator != (const QueryService_q_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_q_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_q_pargs {
 public:


  virtual ~QueryService_q_pargs() throw();
  const int32_t* logid;
  const int64_t* w;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_q_result__isset {
  _QueryService_q_result__isset() : success(false) {}
  bool success :1;
} _QueryService_q_result__isset;

class QueryService_q_result {
 public:

  QueryService_q_result(const QueryService_q_result&);
  QueryService_q_result& operator=(const QueryService_q_result&);
  QueryService_q_result() : success(0) {
  }

  virtual ~QueryService_q_result() throw();
  int32_t success;

  _QueryService_q_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const QueryService_q_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_q_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_q_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_q_presult__isset {
  _QueryService_q_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_q_presult__isset;

class QueryService_q_presult {
 public:


  virtual ~QueryService_q_presult() throw();
  int32_t* success;

  _QueryService_q_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QueryServiceClient : virtual public QueryServiceIf, public ServiceClient {
 public:
  QueryServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ServiceClient(prot, prot) {}
  QueryServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    ServiceClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t add(const int32_t num1, const int32_t num2);
  void send_add(const int32_t num1, const int32_t num2);
  int32_t recv_add();
  int32_t q(const int32_t logid, const int64_t w);
  void send_q(const int32_t logid, const int64_t w);
  int32_t recv_q();
};

class QueryServiceProcessor : public ServiceProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_q(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QueryServiceProcessor(::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface) :
    ServiceProcessor(iface),
    iface_(iface) {
    processMap_["ping"] = &QueryServiceProcessor::process_ping;
    processMap_["add"] = &QueryServiceProcessor::process_add;
    processMap_["q"] = &QueryServiceProcessor::process_q;
  }

  virtual ~QueryServiceProcessor() {}
};

class QueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QueryServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< QueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< QueryServiceIfFactory > handlerFactory_;
};

class QueryServiceMultiface : virtual public QueryServiceIf, public ServiceMultiface {
 public:
  QueryServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<QueryServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<apache::thrift::stdcxx::shared_ptr<QueryServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ServiceMultiface::add(*iter);
    }
  }
  virtual ~QueryServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<QueryServiceIf> > ifaces_;
  QueryServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface) {
    ServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t add(const int32_t num1, const int32_t num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(num1, num2);
    }
    return ifaces_[i]->add(num1, num2);
  }

  int32_t q(const int32_t logid, const int64_t w) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->q(logid, w);
    }
    return ifaces_[i]->q(logid, w);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class QueryServiceConcurrentClient : virtual public QueryServiceIf, public ServiceConcurrentClient {
 public:
  QueryServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ServiceConcurrentClient(prot, prot) {}
  QueryServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    ServiceConcurrentClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t add(const int32_t num1, const int32_t num2);
  int32_t send_add(const int32_t num1, const int32_t num2);
  int32_t recv_add(const int32_t seqid);
  int32_t q(const int32_t logid, const int64_t w);
  int32_t send_q(const int32_t logid, const int64_t w);
  int32_t recv_q(const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
